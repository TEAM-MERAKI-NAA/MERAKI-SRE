name: Deploy the MERAKI Application 

on:
  push:
    branches: [ latest-branch--updates ]

env:
  AZURE_VM_HOST: ${{ secrets.AZURE_VM_HOST }}
  AZURE_VM_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
  AZURE_SSH_PRIVATE_KEY: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy Backend
      run: |
        ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} '
          echo "Starting backend deployment..."
          
          # Remove old backend repository
          rm -rf ~/MERAKI-BE
          
          # Clone backend repository from correct branch
          git clone -b swagat-newbase https://github.com/TEAM-MERAKI-NAA/MERAKI-BE.git ~/MERAKI-BE
          
          echo "Moving to repository directory..."
          cd ~/MERAKI-BE
          
          # Find Dockerfile
          DOCKERFILE_PATH=$(find . -name "Dockerfile" | head -1)
          
          if [ -z "$DOCKERFILE_PATH" ]; then
            echo "ERROR: Dockerfile not found in repository"
            echo "Contents of repository root:"
            ls -la
            exit 1
          fi
          
          # Extract directory where Dockerfile is located
          DOCKER_DIR=$(dirname "$DOCKERFILE_PATH")
          echo "Dockerfile found at: $DOCKERFILE_PATH"
          cd "$DOCKER_DIR"
          
          echo "Current directory contents:"
          ls -la
          
          # Login to Azure Container Registry
          echo "Logging in to ACR..."
          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
          
          # Stop and remove any existing backend containers
          echo "Managing existing containers..."
          BACKEND_CONTAINERS=$(docker ps -q --filter ancestor=${{ secrets.ACR_LOGIN_SERVER }}/immihub-be 2>/dev/null || true)
          if [ -n "$BACKEND_CONTAINERS" ]; then
            echo "Stopping and removing existing backend containers..."
            docker stop $BACKEND_CONTAINERS
            docker rm $BACKEND_CONTAINERS
          else
            echo "No existing backend containers found."
          fi
          
          # Build and push Docker image
          echo "Building Docker image..."
          docker build -t immihub-be .
          
          echo "Tagging Docker image..."
          docker tag immihub-be ${{ secrets.ACR_LOGIN_SERVER }}/immihub-be:latest
          
          echo "Pushing Docker image to ACR..."
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/immihub-be:latest
          
          # Run the new container
          echo "Running the container..."
          docker run -d -p 8000:8000 ${{ secrets.ACR_LOGIN_SERVER }}/immihub-be:latest
          
          echo "Backend deployment completed!"
        '

    - name: Backend Health Check
      run: |
        echo "Waiting for backend to start..."
        sleep 30
        
        echo "Checking backend health..."
        curl -f http://${{ secrets.AZURE_VM_HOST }}:8000/health/ || {
          echo "Backend health check failed!"
          exit 1
        }
        
        echo "Backend is running successfully!"

    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up SSH keys..."
        rm -f ~/.ssh/id_rsa
        echo "Deployment workflow completed."
