name: Deploy the MERAKI Application in Azure VM for demonstration

on:
  push:
    branches: [ main ]

env:
  AZURE_VM_HOST: ${{ secrets.AZURE_VM_HOST }}
  AZURE_VM_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
  AZURE_SSH_PRIVATE_KEY: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  # Add PostgreSQL environment variables
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT || '5432' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy Frontend
      run: |
        # SSH into VM and deploy frontend
        ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} '
          echo "Starting frontend deployment..."
          
          # Clone frontend repository (specifically the main branch with Dockerfile)
          rm -rf ~/MERAKI-FE
          git clone -b staging https://github.com/TEAM-MERAKI-NAA/MERAKI-FE.git
          
          echo "Moving to repository directory..."
          cd ~/MERAKI-FE
          
          # Check if Dockerfile exists
          if [ ! -f "Dockerfile" ]; then
            echo "ERROR: Dockerfile not found in current directory"
            echo "Contents of directory:"
            ls -la
            exit 1
          fi
          
          echo "Dockerfile found, proceeding with build..."
          
          # Login to ACR
          echo "Logging in to ACR..."
          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
          
          # Stop and remove existing containers more safely
          echo "Managing existing containers..."
          FRONTEND_CONTAINERS=$(docker ps -q --filter ancestor=${{ secrets.ACR_LOGIN_SERVER }}/immihub-fe 2>/dev/null || true)
          if [ -n "$FRONTEND_CONTAINERS" ]; then
            echo "Stopping and removing existing frontend containers"
            docker stop $FRONTEND_CONTAINERS
            docker rm $FRONTEND_CONTAINERS
          else
            echo "No existing frontend containers found"
          fi
          
          # Build and tag image
          echo "Building Docker image..."
          docker build -t immihub-fe .
          
          echo "Tagging Docker image..."
          docker tag immihub-fe ${{ secrets.ACR_LOGIN_SERVER }}/immihub-fe:latest
          
          # Push to ACR
          echo "Pushing to ACR..."
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/immihub-fe:latest
          
          # Run the container
          echo "Running the container..."
          docker run -d -p 3000:3000 ${{ secrets.ACR_LOGIN_SERVER }}/immihub-fe:latest
          
          echo "Frontend deployment completed!"
        '

    - name: Deploy Backend
      run: |
        # SSH into VM and deploy backend
        ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} '
          echo "Starting backend deployment..."
          
          # Clone backend repository
          rm -rf ~/MERAKI-BE
          git clone -b staging https://github.com/TEAM-MERAKI-NAA/MERAKI-BE.git ~/MERAKI-BE
          
          echo "Moving to repository directory..."
          cd ~/MERAKI-BE
          
          # Try to find Dockerfile recursively
          DOCKERFILE_PATH=$(find . -name "Dockerfile" | head -1)
          
          if [ -z "$DOCKERFILE_PATH" ]; then
            echo "ERROR: Dockerfile not found in repository"
            echo "Contents of root directory:"
            ls -la
            exit 1
          fi
          
          # Extract directory path from file path
          DOCKER_DIR=$(dirname "$DOCKERFILE_PATH")
          echo "Dockerfile found at: $DOCKERFILE_PATH"
          echo "Moving to directory: $DOCKER_DIR"
          cd "$DOCKER_DIR"
          
          echo "Current directory contents:" 
          ls -la
          
          # Login to ACR
          echo "Logging in to ACR..."
          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
          
          # Stop and remove existing containers more safely
          echo "Managing existing containers..."
          BACKEND_CONTAINERS=$(docker ps -q --filter ancestor=${{ secrets.ACR_LOGIN_SERVER }}/immihub-be 2>/dev/null || true)
          if [ -n "$BACKEND_CONTAINERS" ]; then
            echo "Stopping and removing existing backend containers"
            docker stop $BACKEND_CONTAINERS
            docker rm $BACKEND_CONTAINERS
          else
            echo "No existing backend containers found"
          fi
          
          # Build and tag image
          echo "Building Docker image..."
          docker build -t immihub-be .
          
          echo "Tagging Docker image..."
          docker tag immihub-be ${{ secrets.ACR_LOGIN_SERVER }}/immihub-be:latest
          
          # Push to ACR
          echo "Pushing to ACR..."
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/immihub-be:latest
          
          # Run migrations before starting the container
          echo "Running database migrations..."
          docker run --rm \
            -e POSTGRES_DB="${{ secrets.POSTGRES_DB }}" \
            -e POSTGRES_USER="${{ secrets.POSTGRES_USER }}" \
            -e POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
            -e POSTGRES_HOST="${{ secrets.POSTGRES_HOST }}" \
            -e POSTGRES_PORT="${{ secrets.POSTGRES_PORT || '"'"'5432'"'"' }}" \
            -e DEBUG="True" \
            ${{ secrets.ACR_LOGIN_SERVER }}/immihub-be:latest \
            python manage.py migrate
          
          # Run the container with environment variables
          echo "Running the container..."
          docker run -d -p 8000:8000 \
            -e POSTGRES_DB="${{ secrets.POSTGRES_DB }}" \
            -e POSTGRES_USER="${{ secrets.POSTGRES_USER }}" \
            -e POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
            -e POSTGRES_HOST="${{ secrets.POSTGRES_HOST }}" \
            -e POSTGRES_PORT="${{ secrets.POSTGRES_PORT || '"'"'5432'"'"' }}" \
            -e DEBUG="True" \
            ${{ secrets.ACR_LOGIN_SERVER }}/immihub-be:latest
          
          echo "Backend deployment completed!"
          
          # Check logs after deployment
          echo "Checking latest backend container logs..."
          LATEST_CONTAINER=$(docker ps -q --filter ancestor=${{ secrets.ACR_LOGIN_SERVER }}/immihub-be --latest)
          if [ -n "$LATEST_CONTAINER" ]; then
            echo "Recent container logs:"
            docker logs $LATEST_CONTAINER
          fi
        '

    - name: Health Check
      run: |
        echo "Waiting for services to start..."
        sleep 30
        
        echo "Checking frontend health..."
        curl -f http://${{ secrets.AZURE_VM_HOST }}:3000 || {
          echo "Frontend health check failed!"
          exit 1
        }
        
        echo "Checking backend health..."
        curl -f http://${{ secrets.AZURE_VM_HOST }}:8000 || {
          echo "Backend health check failed. Checking logs..."
          ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} '
            LATEST_CONTAINER=$(docker ps -q --filter ancestor=${{ secrets.ACR_LOGIN_SERVER }}/immihub-be --latest)
            if [ -n "$LATEST_CONTAINER" ]; then
              docker logs $LATEST_CONTAINER
            fi
          '
          # Don't exit with error to avoid failing the workflow if backend is running but health endpoint doesn't exist
          echo "Check logs for details."
        }

    - name: Check Backend Status
      run: |
        echo "Verifying backend status..."
        ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} '
          # Check if container is running
          BACKEND_CONTAINER=$(docker ps -q --filter ancestor=${{ secrets.ACR_LOGIN_SERVER }}/immihub-be --latest)
          if [ -n "$BACKEND_CONTAINER" ]; then
            echo "Backend container is running with ID: $BACKEND_CONTAINER"
            echo "Container network details:"
            docker inspect --format="{{json .NetworkSettings.Ports}}" $BACKEND_CONTAINER
            
            # Check if port 8000 is listening
            echo "Checking if port 8000 is listening:"
            netstat -tuln | grep 8000 || echo "Port 8000 not listening!"
            
            # Check container logs
            echo "Container logs:"
            docker logs $BACKEND_CONTAINER
          else
            echo "ERROR: Backend container is not running!"
          fi
        '

    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up SSH keys..."
        rm -f ~/.ssh/id_rsa
        echo "Deployment workflow completed."
